from __future__ import annotations
from typing import List, Optional
from enum import Enum
from sqlalchemy import Integer, String, Date, Boolean, Text, Enum as SAEnum, Column, Table, ForeignKey
from sqlalchemy.orm import DeclarativeBase, relationship, mapped_column, Mapped

{% for packaze, set in package.getPackageImports().items() %}
from {{ packaze.getSQLAName() }} import {% for clazz in set %}{{ clazz.getSQLAName() }}{% if not loop.last %}, {% endif %}{% endfor %}{% endfor %}



class Base(DeclarativeBase):
    id = mapped_column(Integer, primary_key=True)


{# Enumeraries #}
# Enumeraries
{% for enumeration in package.enumerations %}
class {{ enumeration.getSQLAName() }}(Enum):
{% for literal in enumeration.literals %}{% if literal.name is not none %}  {{ literal.getSQLAName() }} = {{ loop.index }}{% endif %}
{% endfor %}{% endfor %}


{# Koppeltabellen #}
# Koppeltabellen
{% for class in package.classes %}
    {%- for associatie in class.uitgaande_associaties %}
        {%- if not associatie.hasOrphan() %}
            {%- if associatie.getType(class) == 'n-m' %}
{{ associatie.getSQLAKoppelName() }} = Table(
    "{{ associatie.getSQLAKoppelName() }}",
    Base.metadata,
    Column("left_id", ForeignKey("{{ associatie.src_class.getSQLATableName() }}.id"), primary_key=True),
    Column("right_id", ForeignKey("{{ associatie.dst_class.getSQLATableName() }}.id"), primary_key=True),
)
            {%- endif %}
        {%- endif %}
    {%- endfor %}
{%- endfor %}


{# Classes #}
# Classes
{% for class in package.classes -%}
class {{ class.getSQLAName()  }}(Base):
    '''
    {{- class.definitie|default("<Geen Definities>", true)  }}
    '''
    __tablename__ = "{{ class.getSQLATableName() }}"
    {% for attribute in class.attributes -%}
        {%- if attribute.name is not none %}
    {{ attribute.getSQLAName() }} = mapped_column({{ attribute.getDatatype() | sqla_datatype }})
        {%- endif %}
    {%- endfor %}
    {%- for associatie in class.uitgaande_associaties -%}
        {%- if not associatie.hasOrphan() %}
        {#- Source: {{ associatie.getType(class) }} {{ associatie.id }} Source_mult: {{ associatie.src_mult_end }} Dest_mult: {{ associatie.dst_mult_end }} #}
            {%- if associatie.getType(class) == 'n-1' %}
    {{ associatie.dst_class.getSQLAAttrName() }}_id: Mapped[{{ 'int' if associatie.src_mult_start != '1' else 'Optional[int]' }}] = mapped_column(ForeignKey("{{ associatie.dst_class.getSQLATableName() }}.id"), index=True, nullable={{ associatie.src_mult_start == '1' }})
    {{ associatie.dst_class.getSQLAAttrName() }}: Mapped[{{ associatie.dst_class.getSQLAName() }}] = relationship(back_populates="{{ class.getSQLAAttrName() | meervoud}}")
            {%- elif associatie.getType(class) == '1-1' %}
    {{ associatie.dst_class.getSQLAAttrName() }}: Mapped[{{ associatie.dst_class.getSQLAName() }}] = relationship(back_populates="{{ class.getSQLAAttrName() }}")
            {%- elif associatie.getType(class) == '1-n' %}
    {{ associatie.dst_class.getSQLAAttrName() | meervoud}}: Mapped[List[{{ associatie.dst_class.getSQLAName() }}]] = relationship(back_populates="{{ class.getSQLAAttrName() }}")
            {%- elif associatie.getType(class) == 'n-m' %}
    {{ associatie.dst_class.getSQLAAttrName() | meervoud}}: Mapped[List[{{ associatie.dst_class.getSQLAName() }}]] = relationship(secondary={{ associatie.getSQLAKoppelName() }})
            {%- endif %}
        {%- endif %}
    {%- endfor %}
    {%- for associatie in class.inkomende_associaties -%}
        {%- if not associatie.hasOrphan() %}
        {#- Dest: {{ associatie.getType(class) }} {{ associatie.id }} Source_mult: {{ associatie.src_mult_end }} Dest_mult: {{ associatie.dst_mult_end }} #}
            {%- if associatie.getType(class) in ['1-1'] %}
    {{ associatie.src_class.getSQLAAttrName() }}_id: Mapped[{{ 'int' if associatie.dst_mult_start != '1' else 'Optional[int]' }}] = mapped_column(ForeignKey("{{ associatie.src_class.getSQLATableName() }}.id"), index=True, nullable={{ associatie.dst_mult_start == '1' }})
    {{ associatie.src_class.getSQLAAttrName() }}: Mapped[{{ associatie.src_class.getSQLAName() }}] = relationship(back_populates="{{ class.getSQLAAttrName() }}")
            {%- elif associatie.getType(class) in ['1-n'] %}
    {{ associatie.src_class.getSQLAAttrName() }}_id: Mapped[{{ 'int' if associatie.dst_mult_start != '1' else 'Optional[int]' }}] = mapped_column(ForeignKey("{{ associatie.src_class.getSQLATableName() }}.id"), index=True, nullable={{ associatie.dst_mult_start == '1' }})
    {{ associatie.src_class.getSQLAAttrName() }}: Mapped[{{ associatie.src_class.getSQLAName() }}] = relationship(back_populates="{{ class.getSQLAAttrName() | meervoud}}")
            {%- elif associatie.getType(class) == 'n-1' %}
    {{ associatie.src_class.getSQLAAttrName() | meervoud}}: Mapped[List[{{ associatie.src_class.getSQLAName() }}]] = relationship(back_populates="{{ class.getSQLAAttrName() }}")
            {%- elif associatie.getType(class) == 'n-m' %}
    {{ associatie.src_class.getSQLAAttrName() | meervoud}}: Mapped[List[{{ associatie.src_class.getSQLAName() }}]] = relationship(secondary={{ associatie.getSQLAKoppelName() }})
            {%- endif %}
        {%- endif %}
    {%- endfor %} 

{% endfor %}

